--[[
  __  __ _       _               _                            _               
 |  \/  (_)     (_)             | |                          | |              
 | \  / |_ _ __  _  ___  _ __   | |     __ _ _   _ _ __   ___| |__   ___ _ __ 
 | |\/| | | '_ \| |/ _ \| '_ \  | |    / _` | | | | '_ \ / __| '_ \ / _ \ '__|
 | |  | | | | | | | (_) | | | | | |___| (_| | |_| | | | | (__| | | |  __/ |   
 |_|  |_|_|_| |_|_|\___/|_| |_| |______\__,_|\__,_|_| |_|\___|_| |_|\___|_|   
                                                                              
              
]]--                                                                

function sandbox(var,func)
	local env = getfenv(func)
	local newenv = setmetatable({},{
		__index = function(self,k)
			if k=="script" then
				return var
			else
				return env[k]
			end
		end,
	})
	setfenv(func,newenv)
	return func
end
cors = {}
mas = Instance.new("Model",game:GetService("Lighting"))
Tool0 = Instance.new("Tool")
Part1 = Instance.new("Part")
SpecialMesh2 = Instance.new("SpecialMesh")
Sound3 = Instance.new("Sound")
LocalScript4 = Instance.new("LocalScript")
Script5 = Instance.new("Script")
Model6 = Instance.new("Model")
Part7 = Instance.new("Part")
Motor6D8 = Instance.new("Motor6D")
BodyForce9 = Instance.new("BodyForce")
Part10 = Instance.new("Part")
Motor6D11 = Instance.new("Motor6D")
Motor6D12 = Instance.new("Motor6D")
Motor6D13 = Instance.new("Motor6D")
Motor6D14 = Instance.new("Motor6D")
Motor6D15 = Instance.new("Motor6D")
SpecialMesh16 = Instance.new("SpecialMesh")
Folder17 = Instance.new("Folder")
Sound18 = Instance.new("Sound")
Sound19 = Instance.new("Sound")
Sound20 = Instance.new("Sound")
Sound21 = Instance.new("Sound")
Sound22 = Instance.new("Sound")
Part23 = Instance.new("Part")
Part24 = Instance.new("Part")
Part25 = Instance.new("Part")
Part26 = Instance.new("Part")
Part27 = Instance.new("Part")
SpecialMesh28 = Instance.new("SpecialMesh")
Humanoid29 = Instance.new("Humanoid")
BodyColors30 = Instance.new("BodyColors")
Script31 = Instance.new("Script")
BillboardGui32 = Instance.new("BillboardGui")
TextLabel33 = Instance.new("TextLabel")
Configuration34 = Instance.new("Configuration")
ModuleScript35 = Instance.new("ModuleScript")
ModuleScript36 = Instance.new("ModuleScript")
ModuleScript37 = Instance.new("ModuleScript")
ModuleScript38 = Instance.new("ModuleScript")
ModuleScript39 = Instance.new("ModuleScript")
ModuleScript40 = Instance.new("ModuleScript")
Configuration41 = Instance.new("Configuration")
IntValue42 = Instance.new("IntValue")
BoolValue43 = Instance.new("BoolValue")
IntValue44 = Instance.new("IntValue")
IntValue45 = Instance.new("IntValue")
Configuration46 = Instance.new("Configuration")
Animation47 = Instance.new("Animation")
Animation48 = Instance.new("Animation")
CharacterMesh49 = Instance.new("CharacterMesh")
CharacterMesh50 = Instance.new("CharacterMesh")
CharacterMesh51 = Instance.new("CharacterMesh")
CharacterMesh52 = Instance.new("CharacterMesh")
CharacterMesh53 = Instance.new("CharacterMesh")
Script54 = Instance.new("Script")
Script55 = Instance.new("Script")
Tool0.Name = "NoobTube"
Tool0.Parent = mas
Tool0.TextureId = "http://www.roblox.com/asset/?id=27469657"
Tool0.Grip = CFrame.new(0, -0.699999988, -0.699999988, -1, 0, 0, 0, 1, 0, 0, 0, -1)
Tool0.GripForward = Vector3.new(-0, -0, 1)
Tool0.GripPos = Vector3.new(0, -0.699999988079071, -0.699999988079071)
Tool0.GripRight = Vector3.new(-1, 0, 0)
Part1.Name = "Handle"
Part1.Parent = Tool0
Part1.CFrame = CFrame.new(8.18272591, 3.44567251, 0.89706707, -8.94069672e-08, -0.00908773672, 0.999958754, -0.0508622602, 0.998664379, 0.00907597132, -0.998705566, -0.0508601516, -0.00046235323)
Part1.Orientation = Vector3.new(-0.5199999809265137, 90.02999877929688, -2.9200000762939453)
Part1.Position = Vector3.new(8.18272590637207, 3.4456725120544434, 0.8970670700073242)
Part1.Rotation = Vector3.new(-92.91999816894531, 89.4800033569336, 90)
Part1.Color = Color3.new(0.294118, 0.592157, 0.294118)
Part1.Size = Vector3.new(1, 1.2000000476837158, 4)
Part1.BrickColor = BrickColor.new("Bright green")
Part1.Locked = true
Part1.brickColor = BrickColor.new("Bright green")
SpecialMesh2.Parent = Part1
SpecialMesh2.MeshId = "http://www.roblox.com/asset/?id=27469702"
SpecialMesh2.TextureId = "http://www.roblox.com/asset/?id=27469682"
SpecialMesh2.MeshType = Enum.MeshType.FileMesh
Sound3.Name = "NoobShoot"
Sound3.Parent = Part1
Sound3.SoundId = "rbxassetid://174915286"
Sound3.Volume = 2
LocalScript4.Name = "MouseIcon"
LocalScript4.Parent = Tool0
table.insert(cors,sandbox(LocalScript4,function()
--Made by Luckymaxer

Mouse_Icon = "http://www.roblox.com/asset/?id=27404887"
Reloading_Icon = "http://www.roblox.com/asset/?id=27398778"

Tool = script.Parent

Mouse = nil

function UpdateIcon()
	if Mouse then
		Mouse.Icon = Tool.Enabled and Mouse_Icon or Reloading_Icon
	end
end

function OnEquipped(ToolMouse)
	Mouse = ToolMouse
	UpdateIcon()
end

function OnChanged(Property)
	if Property == "Enabled" then
		UpdateIcon()
	end
end

Tool.Equipped:connect(OnEquipped)
Tool.Changed:connect(OnChanged)
end))
Script5.Name = "Activate"
Script5.Parent = Tool0
table.insert(cors,sandbox(Script5,function()
script.Parent.Activated:connect(function()
	local plr = script.Parent.Parent
	script.Parent.Handle.NoobShoot:Play()
	local Minion = game:GetService("ReplicatedStorage"):WaitForChild("Min"):Clone()
	Minion.Parent = workspace
	Minion.HumanoidRootPart.CFrame = plr.HumanoidRootPart.CFrame * CFrame.new(0,0,-12)
end)
end))
Model6.Name = "Min"
Model6.Parent = Tool0
Part7.Name = "HumanoidRootPart"
Part7.Parent = Model6
Part7.CFrame = CFrame.new(7.76831388, 3.00001001, 7.85303497, -1, -2.12045811e-27, 0, -2.12045811e-27, 1, -1.51463335e-27, 0, -1.51463335e-27, -1)
Part7.Orientation = Vector3.new(0, 180, 0)
Part7.Position = Vector3.new(7.768313884735107, 3.0000100135803223, 7.853034973144531)
Part7.Rotation = Vector3.new(180, 0, 180)
Part7.Color = Color3.new(0.152941, 0.27451, 0.176471)
Part7.Transparency = 1
Part7.Size = Vector3.new(2, 2, 1)
Part7.BottomSurface = Enum.SurfaceType.Smooth
Part7.BrickColor = BrickColor.new("Earth green")
Part7.Material = Enum.Material.WoodPlanks
Part7.TopSurface = Enum.SurfaceType.Smooth
Part7.brickColor = BrickColor.new("Earth green")
Part7.FormFactor = Enum.FormFactor.Symmetric
Part7.formFactor = Enum.FormFactor.Symmetric
Motor6D8.Name = "Root Hip"
Motor6D8.Parent = Part7
Motor6D8.MaxVelocity = 0.10000000149011612
Motor6D8.C0 = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0)
Motor6D8.C1 = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0)
Motor6D8.Part0 = Part7
Motor6D8.Part1 = Part10
Motor6D8.part1 = Part10
BodyForce9.Name = "RepulsionForce"
BodyForce9.Parent = Part7
BodyForce9.Force = Vector3.new(0, 0, 0)
BodyForce9.force = Vector3.new(0, 0, 0)
Part10.Name = "Torso"
Part10.Parent = Model6
Part10.CFrame = CFrame.new(7.76831388, 3.00001001, 7.85303497, -1, -2.12045811e-27, 0, -2.12045811e-27, 1, -1.51463335e-27, 0, -1.51463335e-27, -1)
Part10.Orientation = Vector3.new(0, 180, 0)
Part10.Position = Vector3.new(7.768313884735107, 3.0000100135803223, 7.853034973144531)
Part10.Rotation = Vector3.new(180, 0, 180)
Part10.Color = Color3.new(0.156863, 0.498039, 0.278431)
Part10.Size = Vector3.new(2, 2, 1)
Part10.BottomSurface = Enum.SurfaceType.Smooth
Part10.BrickColor = BrickColor.new("Dark green")
Part10.Material = Enum.Material.WoodPlanks
Part10.TopSurface = Enum.SurfaceType.Smooth
Part10.brickColor = BrickColor.new("Dark green")
Part10.FormFactor = Enum.FormFactor.Symmetric
Part10.formFactor = Enum.FormFactor.Symmetric
Motor6D11.Name = "Right Shoulder"
Motor6D11.Parent = Part10
Motor6D11.MaxVelocity = 0.10000000149011612
Motor6D11.C0 = CFrame.new(1, 0.5, 0, -4.37113883e-08, 0, 1, -0, 0.99999994, 0, -1, 0, -4.37113883e-08)
Motor6D11.C1 = CFrame.new(-0.5, 0.5, 0, -4.37113883e-08, 0, 1, 0, 0.99999994, 0, -1, 0, -4.37113883e-08)
Motor6D11.Part0 = Part10
Motor6D11.Part1 = Part26
Motor6D11.part1 = Part26
Motor6D12.Name = "Right Hip"
Motor6D12.Parent = Part10
Motor6D12.MaxVelocity = 0.10000000149011612
Motor6D12.C0 = CFrame.new(1, -1, 0, -4.37113883e-08, 0, 1, -0, 0.99999994, 0, -1, 0, -4.37113883e-08)
Motor6D12.C1 = CFrame.new(0.5, 1, 0, -4.37113883e-08, 0, 1, 0, 0.99999994, 0, -1, 0, -4.37113883e-08)
Motor6D12.Part0 = Part10
Motor6D12.Part1 = Part24
Motor6D12.part1 = Part24
Motor6D13.Name = "Neck"
Motor6D13.Parent = Part10
Motor6D13.MaxVelocity = 0.10000000149011612
Motor6D13.C0 = CFrame.new(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0)
Motor6D13.C1 = CFrame.new(0, -0.5, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0)
Motor6D13.Part0 = Part10
Motor6D13.Part1 = Part27
Motor6D13.part1 = Part27
Motor6D14.Name = "Left Shoulder"
Motor6D14.Parent = Part10
Motor6D14.MaxVelocity = 0.10000000149011612
Motor6D14.C0 = CFrame.new(-1, 0.5, 0, -4.37113883e-08, 0, -1, 0, 0.99999994, 0, 1, 0, -4.37113883e-08)
Motor6D14.C1 = CFrame.new(0.5, 0.5, 0, -4.37113883e-08, 0, -1, 0, 0.99999994, 0, 1, 0, -4.37113883e-08)
Motor6D14.Part0 = Part10
Motor6D14.Part1 = Part25
Motor6D14.part1 = Part25
Motor6D15.Name = "Left Hip"
Motor6D15.Parent = Part10
Motor6D15.MaxVelocity = 0.10000000149011612
Motor6D15.C0 = CFrame.new(-1, -1, 0, -4.37113883e-08, 0, -1, 0, 0.99999994, 0, 1, 0, -4.37113883e-08)
Motor6D15.C1 = CFrame.new(-0.5, 1, 0, -4.37113883e-08, 0, -1, 0, 0.99999994, 0, 1, 0, -4.37113883e-08)
Motor6D15.Part0 = Part10
Motor6D15.Part1 = Part23
Motor6D15.part1 = Part23
SpecialMesh16.Parent = Part10
SpecialMesh16.MeshId = "http://www.roblox.com/asset/?id=119447056"
SpecialMesh16.Offset = Vector3.new(0, -0.4000000059604645, 0)
SpecialMesh16.Scale = Vector3.new(2, 2, 2)
SpecialMesh16.TextureId = "http://www.roblox.com/asset/?id=119444340"
SpecialMesh16.MeshType = Enum.MeshType.FileMesh
Folder17.Name = "Sounds"
Folder17.Parent = Part10
Sound18.Name = "Ha"
Sound18.Parent = Folder17
Sound18.SoundId = "rbxassetid://154157543"
Sound18.Volume = 1
Sound19.Name = "Hi"
Sound19.Parent = Folder17
Sound19.SoundId = "rbxassetid://154147007"
Sound19.Volume = 1
Sound20.Name = "Muh"
Sound20.Parent = Folder17
Sound20.SoundId = "rbxassetid://1601659619"
Sound20.Volume = 1
Sound21.Name = "Gr"
Sound21.Parent = Folder17
Sound21.SoundId = "rbxassetid://154157312"
Sound21.Volume = 1
Sound22.Name = "Bye"
Sound22.Parent = Folder17
Sound22.SoundId = "rbxassetid://154157386"
Sound22.Volume = 1
Part23.Name = "Left Leg"
Part23.Parent = Model6
Part23.CFrame = CFrame.new(8.26831436, 1.00001013, 7.85303497, -1, -2.12045792e-27, 0, -2.12045811e-27, 0.999999881, -1.51463335e-27, 0, -1.51463316e-27, -1)
Part23.Orientation = Vector3.new(0, 180, 0)
Part23.Position = Vector3.new(8.268314361572266, 1.0000101327896118, 7.853034973144531)
Part23.Rotation = Vector3.new(180, 0, 180)
Part23.Color = Color3.new(0.0509804, 0.411765, 0.67451)
Part23.Transparency = 1
Part23.Size = Vector3.new(1, 2, 1)
Part23.BottomSurface = Enum.SurfaceType.Smooth
Part23.BrickColor = BrickColor.new("Bright blue")
Part23.CanCollide = false
Part23.Material = Enum.Material.WoodPlanks
Part23.TopSurface = Enum.SurfaceType.Smooth
Part23.brickColor = BrickColor.new("Bright blue")
Part23.FormFactor = Enum.FormFactor.Symmetric
Part23.formFactor = Enum.FormFactor.Symmetric
Part24.Name = "Right Leg"
Part24.Parent = Model6
Part24.CFrame = CFrame.new(7.26831388, 1.00001013, 7.85303497, -1, -2.12045792e-27, 0, -2.12045811e-27, 0.999999881, -1.51463335e-27, 0, -1.51463316e-27, -1)
Part24.Orientation = Vector3.new(0, 180, 0)
Part24.Position = Vector3.new(7.268313884735107, 1.0000101327896118, 7.853034973144531)
Part24.Rotation = Vector3.new(180, 0, 180)
Part24.Color = Color3.new(0.0509804, 0.411765, 0.67451)
Part24.Transparency = 1
Part24.Size = Vector3.new(1, 2, 1)
Part24.BottomSurface = Enum.SurfaceType.Smooth
Part24.BrickColor = BrickColor.new("Bright blue")
Part24.CanCollide = false
Part24.Material = Enum.Material.WoodPlanks
Part24.TopSurface = Enum.SurfaceType.Smooth
Part24.brickColor = BrickColor.new("Bright blue")
Part24.FormFactor = Enum.FormFactor.Symmetric
Part24.formFactor = Enum.FormFactor.Symmetric
Part25.Name = "Left Arm"
Part25.Parent = Model6
Part25.CFrame = CFrame.new(9.26831436, 3.00001001, 7.85303497, -1, -2.12045792e-27, 0, -2.12045811e-27, 0.999999881, -1.51463335e-27, 0, -1.51463316e-27, -1)
Part25.Orientation = Vector3.new(0, 180, 0)
Part25.Position = Vector3.new(9.268314361572266, 3.0000100135803223, 7.853034973144531)
Part25.Rotation = Vector3.new(180, 0, 180)
Part25.Color = Color3.new(0.992157, 0.917647, 0.552941)
Part25.Transparency = 1
Part25.Size = Vector3.new(1, 2, 1)
Part25.BottomSurface = Enum.SurfaceType.Smooth
Part25.BrickColor = BrickColor.new("Cool yellow")
Part25.CanCollide = false
Part25.Material = Enum.Material.WoodPlanks
Part25.TopSurface = Enum.SurfaceType.Smooth
Part25.brickColor = BrickColor.new("Cool yellow")
Part25.FormFactor = Enum.FormFactor.Symmetric
Part25.formFactor = Enum.FormFactor.Symmetric
Part26.Name = "Right Arm"
Part26.Parent = Model6
Part26.CFrame = CFrame.new(6.26831388, 3.00001001, 7.85303497, -1, -2.12045792e-27, 0, -2.12045811e-27, 0.999999881, -1.51463335e-27, 0, -1.51463316e-27, -1)
Part26.Orientation = Vector3.new(0, 180, 0)
Part26.Position = Vector3.new(6.268313884735107, 3.0000100135803223, 7.853034973144531)
Part26.Rotation = Vector3.new(180, 0, 180)
Part26.Color = Color3.new(0.992157, 0.917647, 0.552941)
Part26.Transparency = 1
Part26.Size = Vector3.new(1, 2, 1)
Part26.BottomSurface = Enum.SurfaceType.Smooth
Part26.BrickColor = BrickColor.new("Cool yellow")
Part26.CanCollide = false
Part26.Material = Enum.Material.WoodPlanks
Part26.TopSurface = Enum.SurfaceType.Smooth
Part26.brickColor = BrickColor.new("Cool yellow")
Part26.FormFactor = Enum.FormFactor.Symmetric
Part26.formFactor = Enum.FormFactor.Symmetric
Part27.Name = "Head"
Part27.Parent = Model6
Part27.CFrame = CFrame.new(7.76831388, 4.50001001, 7.85303497, -1, -2.12045811e-27, 0, -2.12045811e-27, 1, -1.51463335e-27, 0, -1.51463335e-27, -1)
Part27.Orientation = Vector3.new(0, 180, 0)
Part27.Position = Vector3.new(7.768313884735107, 4.500010013580322, 7.853034973144531)
Part27.Rotation = Vector3.new(180, 0, 180)
Part27.Color = Color3.new(0.992157, 0.917647, 0.552941)
Part27.Transparency = 1
Part27.Size = Vector3.new(2, 1, 1)
Part27.BottomSurface = Enum.SurfaceType.Smooth
Part27.BrickColor = BrickColor.new("Cool yellow")
Part27.Material = Enum.Material.WoodPlanks
Part27.TopSurface = Enum.SurfaceType.Smooth
Part27.brickColor = BrickColor.new("Cool yellow")
Part27.FormFactor = Enum.FormFactor.Symmetric
Part27.formFactor = Enum.FormFactor.Symmetric
SpecialMesh28.Parent = Part27
SpecialMesh28.Scale = Vector3.new(1.25, 1.25, 1.25)
Humanoid29.Parent = Model6
Humanoid29.Health = inf
Humanoid29.LeftLeg = Part23
Humanoid29.MaxHealth = inf
Humanoid29.RightLeg = Part24
Humanoid29.Torso = Part7
Humanoid29.WalkSpeed = 100
Humanoid29.maxHealth = inf
BodyColors30.Parent = Model6
BodyColors30.HeadColor = BrickColor.new("Camo")
BodyColors30.HeadColor3 = Color3.new(0.227451, 0.490196, 0.0823529)
BodyColors30.LeftArmColor = BrickColor.new("Earth green")
BodyColors30.LeftArmColor3 = Color3.new(0.152941, 0.27451, 0.176471)
BodyColors30.LeftLegColor = BrickColor.new("Earth green")
BodyColors30.LeftLegColor3 = Color3.new(0.152941, 0.27451, 0.176471)
BodyColors30.RightArmColor = BrickColor.new("Earth green")
BodyColors30.RightArmColor3 = Color3.new(0.152941, 0.27451, 0.176471)
BodyColors30.RightLegColor = BrickColor.new("Earth green")
BodyColors30.RightLegColor3 = Color3.new(0.152941, 0.27451, 0.176471)
BodyColors30.TorsoColor = BrickColor.new("Earth green")
BodyColors30.TorsoColor3 = Color3.new(0.152941, 0.27451, 0.176471)
Script31.Parent = Model6
table.insert(cors,sandbox(Script31,function()
local zombie = script.Parent

for _, script in pairs(zombie.ModuleScripts:GetChildren()) do
	if not game.ServerStorage:FindFirstChild(script.Name) then
		script:Clone().Parent = game.ServerStorage
	end
end

local AI = require(game.ServerStorage.ROBLOX_ZombieAI).new(zombie)
local DestroyService = require(game:GetService("ServerStorage").ROBLOX_DestroyService)
local function clearParts(parent)
	for _, part in pairs(parent:GetChildren()) do
		clearParts(part)
	end
	local delay
	if parent:IsA("Part") then
		delay = math.random(5,10)
	else
		delay = 11
	end
	DestroyService:AddItem(parent, delay)
end

zombie.Humanoid.Died:connect(function()
	AI.Stop()
	math.randomseed(tick())
	clearParts(zombie)
	script.Disabled = true
end)

local lastMoan = os.time()
math.randomseed(os.time())
while true do
	local animationTrack = zombie.Humanoid:LoadAnimation(zombie.Animations.Arms)
	animationTrack:Play()
--	local now = os.time()
--	if now - lastMoan > 5 then	
--		if math.random() > .3 then
--			zombie.Moan:Play()
----			print("playing moan")
--			lastMoan = now
--		end
--	end
	wait(2)
end


end))
BillboardGui32.Parent = Model6
BillboardGui32.Size = UDim2.new(0, 100, 0, 30)
BillboardGui32.StudsOffset = Vector3.new(0, 5, 0)
TextLabel33.Parent = BillboardGui32
TextLabel33.Visible = false
TextLabel33.Size = UDim2.new(1, 0, 1, 0)
TextLabel33.BackgroundColor = BrickColor.new("Institutional white")
TextLabel33.BackgroundColor3 = Color3.new(1, 1, 1)
TextLabel33.Font = Enum.Font.SourceSansBold
TextLabel33.FontSize = Enum.FontSize.Size24
TextLabel33.Text = "Idle"
TextLabel33.TextSize = 24
Configuration34.Name = "ModuleScripts"
Configuration34.Parent = Model6
ModuleScript35.Name = "ROBLOX_AIUtilities"
ModuleScript35.Parent = Configuration34
table.insert(cors,sandbox(ModuleScript35,function()
local utility = {}

function utility:WideRayCast(start, target, offset, ignoreList)
	local parts = {}
	
	local ray = Ray.new(start, target - start)
	local part, point = game.Workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)
	if part then table.insert(parts, part) end
	
	local offsetVector = offset * (target - start):Cross(Vector3.FromNormalId(Enum.NormalId.Top)).unit
	local ray = Ray.new(start + offsetVector, target - start + offsetVector)
	local part, point = game.Workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)
	if part then table.insert(parts, part) end
	
	local ray = Ray.new(start - offsetVector, target - start - offsetVector)
	local part, point = game.Workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)
	if part then table.insert(parts, part) end
	
	return parts
end

function utility:FindNearestPathPoint(path, point, start, target, ignoreList)
	local occludePoint = path:CheckOcclusionAsync(point)
	if occludePoint > 0 then
		utility:WideRayCast(start)
	end
end

local maxForce = 15

function utility:GetRepulsionVector(unitPosition, otherUnitsPositions)
	local repulsionVector = Vector3.new(0,0,0)
	local count = 0
	for _, other in pairs(otherUnitsPositions) do
		local fromOther = unitPosition - other 
		--fromOther = fromOther.unit * ((-maxForce / 5) * math.pow(fromOther.magnitude,2) + maxForce)
		fromOther = fromOther.unit * 1000 / math.pow((fromOther.magnitude + 1), 2)
		repulsionVector = repulsionVector + fromOther
	end
	return repulsionVector * maxForce
end

function utility:GetIdleState(StateMachine)
	local IdleState = StateMachine.NewState()
	IdleState.Name = "Idle"
	IdleState.Action = function() end
	IdleState.Init = function() end
	return IdleState
end

function utility:GetClosestVisibleTarget(npcModel, characters, ignoreList, fieldOfView)
	local closestTarget = nil
	local closestDistance = math.huge
	for _, character in pairs(characters) do
		local toTarget = character.HumanoidRootPart.Position - npcModel.HumanoidRootPart.Position
		local toTargetWedge = toTarget * Vector3.new(1,0,1)
		local angle = math.acos(toTargetWedge:Dot(npcModel.HumanoidRootPart.CFrame.lookVector)/toTargetWedge.magnitude)
		if math.deg(angle) < fieldOfView then
			local targetRay = Ray.new(npcModel.HumanoidRootPart.Position, toTarget)
			local part, position = game.Workspace:FindPartOnRayWithIgnoreList(targetRay, ignoreList)
			if part and part.Parent == character then
				if toTarget.magnitude < closestDistance then
					closestTarget = character
					closestDistance = toTarget.magnitude
				end
			end
		end
	end
	return closestTarget
end

local function isSpaceEmpty(position)
	local region = Region3.new(position - Vector3.new(2,2,2), position + Vector3.new(2,2,2))
	return game.Workspace:IsRegion3Empty(region)
end

function utility:FindCloseEmptySpace(model)
	local targetPos = Vector3.new(0,0,0)
	local count = 0
	math.randomseed(os.time())
	repeat
		local xoff = math.random(5,10)
		if math.random() > .5 then
			xoff = xoff * -1
		end
		local zoff = math.random(5, 10)
		if math.random() > .5 then
			zoff = zoff * -1
		end
		
		targetPos = Vector3.new(model.HumanoidRootPart.Position.X + xoff,model.HumanoidRootPart.Position.Y,model.HumanoidRootPart.Position.Z + zoff)
		if isSpaceEmpty(targetPos) then
			return targetPos
		else
			targetPos = targetPos + Vector3.new(0,4,0)
		end
		
		if isSpaceEmpty(targetPos) then
			return targetPos
		end
		count = count + 1
	until count > 10
	return nil
end

return utility
end))
ModuleScript36.Name = "ROBLOX_DestroyService"
ModuleScript36.Parent = Configuration34
table.insert(cors,sandbox(ModuleScript36,function()
local destroyService = {}

local destroyQueue = {}

function destroyService:AddItem(theobject, delay)
	local now = os.time()
	local destroyObject = {object = theobject, destroyTime = delay + now}
	for i, storedObject in pairs(destroyQueue) do
		if destroyQueue[i].destroyTime > destroyObject.destroyTime then
			table.insert(destroyQueue, i, destroyObject)
			return true
		end
	end
	table.insert(destroyQueue, destroyObject)
	return true
end

local updateThread = coroutine.create(function()
	while true do 
		local now = os.time()
		for _, storedObject in pairs(destroyQueue) do
			if now >= storedObject.destroyTime then
				table.remove(destroyQueue, 1)
				if storedObject.object then
					storedObject.object:Destroy()
				end
			elseif now >= storedObject.destroyTime - 1 then
				
				if storedObject.object and storedObject.object:IsA("Part") then
					local trans = storedObject.object.Transparency + 1/30
					storedObject.object.Transparency = trans
				end
			else 
				break
			end
		end
		wait()
	end
end)

coroutine.resume(updateThread)

return destroyService
end))
ModuleScript37.Name = "ROBLOX_HumanoidList"
ModuleScript37.Parent = Configuration34
table.insert(cors,sandbox(ModuleScript37,function()
local humanoidList = {}
local storage = {}

function humanoidList:GetCurrent()
	return storage
end

local function findHumanoids(object, list)
	if object then
		if object:IsA("Humanoid") and object.Parent.Name ~= "Min" then
			table.insert(list, object)
		end

		for _, child in pairs(object:GetChildren()) do
			local childList = findHumanoids(child, list)
		end
	end
end

local updateThread = coroutine.create(function()
	while true do
		storage = {}
		findHumanoids(game.Workspace, storage)
		wait(3)
	end
end)

coroutine.resume(updateThread)

return humanoidList
end))
ModuleScript38.Name = "ROBLOX_StateMachine"
ModuleScript38.Parent = Configuration34
table.insert(cors,sandbox(ModuleScript38,function()
local machine = {}

machine.new = function()
	local StateMachine = {}	
	
	StateMachine.WaitTime = .2
	StateMachine.CurrentState = nil
	StateMachine.SwitchState = function(newState)
		if StateMachine.CurrentState then
			StateMachine.CurrentState.Stop()
		end
		StateMachine.CurrentState = newState
		if newState then
			newState.Start()
		end
	end
	
	StateMachine.NewState = function()
		local state = {}
		state.Name = ""
		state.Conditions = {}
		state.isRunning = false
		state.Action = function() end
		state.Run = function()
			state.isRunning = true
			while state.isRunning do
				--check conditions
				--print("checking conditions")
				for _, condition in pairs(state.Conditions) do
					--print("Checking " .. condition.Name)
					if condition.Evaluate() then
						--print(condition.Name .. " is true. Switching states")
						StateMachine.SwitchState(condition.TransitionState)
						return
					end
				end
				
				--if no conditions satisfied, perform action
				state.Action()
				wait(StateMachine.WaitTime)
			end
		end
		state.Init = function()
			
		end
		state.Start = function()
			--print("Starting " .. state.Name)
			state.Init()
			local thread = coroutine.create(state.Run)
			coroutine.resume(thread)
		end
		state.Stop = function()
			--print("Stopping " .. state.Name)
			state.isRunning = false
		end
		return state
	end
	
	StateMachine.NewCondition = function()
		local condition = {}
		condition.Name = ""
		condition.Evaluate = function() print("replace me") return false end
		condition.TransitionState = {}
		return condition
	end	
	
	return StateMachine
end

return machine
end))
ModuleScript39.Name = "ROBLOX_ZombieAI"
ModuleScript39.Parent = Configuration34
table.insert(cors,sandbox(ModuleScript39,function()
--local PathLib = require(game.ServerStorage.PathfindingLibrary).new()
local HumanoidList = require(game.ServerStorage.ROBLOX_HumanoidList)
local AIUtilities = require(game.ServerStorage.ROBLOX_AIUtilities)

local ZombieAI = {}

function updateDisplay(display, state)
	local thread = coroutine.create(function()
		while true do
			wait()
			if state then
				display.Text = state.Name
			end
		end
	end)
	coroutine.resume(thread)
end

ZombieAI.new = function(model)	
	local zombie = {}	
	
	-- CONFIGURATION VARIABLES
--	local AttackRange, FieldOfView, AggroRange, ChanceOfBoredom, BoredomDuration, 
--		Damage, DamageCooldown

	local configTable = model.Configurations
	local configs = {}
	local function loadConfig(configName, defaultValue)
		if configTable:FindFirstChild(configName) then
			configs[configName] = configTable:FindFirstChild(configName).Value
		else
			configs[configName] = defaultValue
		end
	end

	loadConfig("AttackRange", 3)
	loadConfig("FieldOfView", 1080)
	loadConfig("AggroRange", 2000)
	loadConfig("ChanceOfBoredom", 1)
	loadConfig("BoredomDuration", 10)
	loadConfig("Damage", 10)
	loadConfig("DamageCooldown", 1)
	
	local StateMachine = require(game.ServerStorage.ROBLOX_StateMachine).new()
	local PathLib = require(game.ServerStorage.ROBLOX_PathfindingLibrary).new()
	local ZombieTarget = nil	
	local ZombieTargetLastLocation = nil
	
	local lastBored = os.time()	
	
	-- STATE DEFINITIONS	
	
	-- IdleState: NPC stays still. Refreshes bored timer when started to
	-- allow for random state change
	local IdleState = StateMachine.NewState()
	IdleState.Name = "Idle"
	IdleState.Action = function()
	end
	IdleState.Init = function()
		lastBored = os.time()
	end	
	
	-- SearchState: NPC wanders randomly increasing chance of spotting
	-- enemy. Refreshed bored timer when started to allow for random state
	-- change
	local SearchState = StateMachine.NewState()
	SearchState.Name = "Search"
	local lastmoved = os.time()
	local searchTarget = nil
	SearchState.Action = function()
		-- move to random spot nearby
		if model then
			local now = os.time()
			if now - lastmoved > 2 then
				lastmoved = now
				local xoff = math.random(5, 10)
				if math.random() > .5 then
					xoff = xoff * -1
				end
				local zoff = math.random(5, 10)
				if math.random() > .5 then
					zoff = zoff * -1
				end
				
				local testtarg = AIUtilities:FindCloseEmptySpace(model)
				--if testtarg then print(testtarg) else print("could not find") end
				searchTarget = Vector3.new(model.HumanoidRootPart.Position.X + xoff,model.HumanoidRootPart.Position.Y,model.HumanoidRootPart.Position.Z + zoff)
				--local target = Vector3.new(model.HumanoidRootPart.Position.X + xoff,model.HumanoidRootPart.Position.Y,model.HumanoidRootPart.Position.Z + zoff)
				--model.Humanoid:MoveTo(target)
				searchTarget = testtarg
			end
			if searchTarget then
				PathLib:MoveToTarget(model, searchTarget)
			end
		end
	end
	SearchState.Init = function()
		lastBored = os.time()
	end
	
	-- PursueState: Enemy has been spotted, need to give chase.
	local PursueState = StateMachine.NewState()
	PursueState.Name = "Pursue"
	PursueState.Action = function()
		-- Double check we still have target
		if ZombieTarget then
			-- Get distance to target
			local distance = (model.HumanoidRootPart.Position - ZombieTarget.HumanoidRootPart.Position).magnitude
			-- If we're far from target use pathfinding to move. Otherwise just MoveTo
			if distance > configs["AttackRange"] + 5 then
				PathLib:MoveToTarget(model, ZombieTarget.HumanoidRootPart.Position)
			else
				model.Humanoid:MoveTo(ZombieTarget.HumanoidRootPart.Position)
--				if ZombieTarget.HumanoidRootPart.Position.Y > model.HumanoidRootPart.Position.Y + 2 then
--					model.Humanoid.Jump = true
--				end
			end
			
		end
	end
	PursueState.Init = function()
	end
	
	-- AttackState: Keep moving towards target and play attack animation.
	local AttackState = StateMachine.NewState()
	AttackState.Name = "Attack"
	local lastAttack = os.time()
	local attackTrack = model.Humanoid:LoadAnimation(model.Animations.Attack)
	AttackState.Action = function()
		model.Humanoid:MoveTo(ZombieTarget.HumanoidRootPart.Position)
		local now = os.time()
		if now - lastAttack > 3 then
			lastAttack = now
			attackTrack:Play()
			local boom = Instance.new("Explosion",workspace)
			boom.Position = ZombieTarget.Torso.Position
			boom.BlastPressure = 3000000
		end
	end
	
	-- HuntState: Can't see target but NPC will move to target's last known location.
	-- Will eventually get bored and switch state.
	local HuntState = StateMachine.NewState()
	HuntState.Name = "Hunt"
	HuntState.Action = function()
		if ZombieTargetLastLocation then
			PathLib:MoveToTarget(model, ZombieTargetLastLocation)
		end
	end
	HuntState.Init = function()
		lastBored = os.time() + configs["BoredomDuration"] / 2
	end
	
	-- CONDITION DEFINITIONS	
	
	-- CanSeeTarget: Determines if a target is visible. Returns true if target is visible and
	-- sets current target. A target is valid if it is nearby, visible, has a Torso and WalkSpeed
	-- greater than 0 (this is to ignore inanimate objects that happen to use humanoids)
	local CanSeeTarget = StateMachine.NewCondition()
	CanSeeTarget.Name = "CanSeeTarget"
	CanSeeTarget.Evaluate = function()
		if model then
			-- Get list of all nearby Zombies and non-Zombie humanoids
			-- Zombie list is used to ignore zombies during later raycast
			local humanoids = HumanoidList:GetCurrent()	
			local zombies = {}
			local characters = {}
			for _, object in pairs(humanoids) do
				if object and object.Parent and object.Parent:FindFirstChild("HumanoidRootPart") and object.Health > 0 and object.WalkSpeed > 0 then				
					local torso = object.Parent:FindFirstChild("HumanoidRootPart")
					if torso then
						local distance = (model.HumanoidRootPart.Position - torso.Position).magnitude
						if distance <= configs["AggroRange"] then
							if object.Parent.Name == "Drooling Zombie" then
								table.insert(zombies, object.Parent)
							else
								table.insert(characters, object.Parent)
							end
						end	
					end	
				end
			end	
			
			local target = AIUtilities:GetClosestVisibleTarget(model, characters, zombies, configs["FieldOfView"])
			if target then
				ZombieTarget = target
				return true
			end
			
--			-- Go through each valid target to see if within field of view and if there is
--			-- clear line of sight. Field of view treated as wedge in front of character.
--			for _, character in pairs(characters) do
--				local toTarget = (character.HumanoidRootPart.Position - model.HumanoidRootPart.Position)
--				toTarget = Vector3.new(toTarget.X, 0, toTarget.Z)
--				local angle = math.acos(toTarget:Dot(model.HumanoidRootPart.CFrame.lookVector)/toTarget.magnitude)
--				if math.deg(angle) < configs["FieldOfView"]/2 then	
--					ZombieTarget = character
--					-- raycast to see if target is actually visible
--					local toTarget = Ray.new(model.HumanoidRootPart.Position, (ZombieTarget.HumanoidRootPart.Position - model.HumanoidRootPart.Position))
--					local part, position = game.Workspace:FindPartOnRayWithIgnoreList(toTarget, zombies)
--					if part and part.Parent == ZombieTarget then
--						return true
--					end		
--					ZombieTarget = nil						
--				end
--			end
		end
		return false
	end
	CanSeeTarget.TransitionState = PursueState
	
	-- TargetDead: Check if target is dead.
	local TargetDead = StateMachine.NewCondition()
	TargetDead.Name = "TargetDead"
	TargetDead.Evaluate = function()
		if ZombieTarget and ZombieTarget.Humanoid then
			return ZombieTarget.Humanoid.Health <= 0
		end
		return true
	end
	TargetDead.TransitionState = IdleState
	
	-- GotDamaged: Check if NPC has taken damage
	local lastHealth = model.Humanoid.Health
	local GotDamaged = StateMachine.NewCondition()
	GotDamaged.Name = "GotDamaged"
	GotDamaged.Evaluate = function()
		if model then
			if lastHealth > model.Humanoid.Health then
				return true
			end
		end
		return false
	end	
	GotDamaged.TransitionState = SearchState
	
	-- GotBored: Used to provide random state change.
	local GotBored = StateMachine.NewCondition()
	GotBored.Name = "GotBored"
	GotBored.Evaluate = function()
		local now = os.time()
		if now - lastBored > configs["BoredomDuration"] then
			local roll = math.random()
			if roll < configs["ChanceOfBoredom"] then
				lastBored = now
				if GotBored.TransitionState == SearchState then
					GotBored.TransitionState = IdleState
				else
					GotBored.TransitionState = SearchState
				end
				return true
			end
		end
		return false
	end
	GotBored.TransitionState = IdleState
	
	-- LostTarget: Checks clear line of sight
	local LostTarget = StateMachine.NewCondition()
	LostTarget.Name = "LostTarget"
	LostTarget.Evaluate = function()
		if true then return false end
		if ZombieTarget then
			if (ZombieTarget.HumanoidRootPart.Position - model.HumanoidRootPart.Position).magnitude > 10 then
				local toTarget = Ray.new(model.HumanoidRootPart.Position, (ZombieTarget.HumanoidRootPart.Position - model.HumanoidRootPart.Position))
				local part, position = game.Workspace:FindPartOnRay(toTarget, model)
				if not part or part.Parent ~= ZombieTarget  then
					--print("Lost target!")
					ZombieTargetLastLocation = ZombieTarget.HumanoidRootPart.Position
					ZombieTarget = nil
					return true
				end
			end
		end
		return false
	end
	LostTarget.TransitionState = HuntState
	
	local WithinRange = StateMachine.NewCondition()
	WithinRange.Name = "WithinRange"
	WithinRange.Evaluate = function()
		if ZombieTarget then
			local distance = (model.HumanoidRootPart.Position - ZombieTarget.HumanoidRootPart.Position).magnitude
			if distance < configs["AttackRange"] then
				--print("Within attack range!")
				return true
			end
		end
		return false
	end
	WithinRange.TransitionState = AttackState
	
	local OutsideRange = StateMachine.NewCondition()
	OutsideRange.Name = "OutsideRange"
	OutsideRange.Evaluate = function()
		if ZombieTarget then
			local distance = (model.HumanoidRootPart.Position - ZombieTarget.HumanoidRootPart.Position).magnitude
			if distance > configs["AttackRange"] then
				--print("Outside attack range!")
				return true
			end
		end
		return false
	end
	OutsideRange.TransitionState = PursueState
	
	table.insert(IdleState.Conditions, CanSeeTarget)
	table.insert(IdleState.Conditions, GotDamaged)
	table.insert(IdleState.Conditions, GotBored)
	
	table.insert(SearchState.Conditions, GotBored)
	table.insert(SearchState.Conditions, CanSeeTarget)
	
	table.insert(PursueState.Conditions, LostTarget)
	table.insert(PursueState.Conditions, WithinRange)
	table.insert(PursueState.Conditions, TargetDead)
	
	table.insert(AttackState.Conditions, OutsideRange)
	table.insert(AttackState.Conditions, TargetDead)
	
	table.insert(HuntState.Conditions, GotBored)
	table.insert(HuntState.Conditions, CanSeeTarget)
	
	-- Setup arms damage
	local canHit = true
	local lastHit = os.time()
	local function handleHit(other)
		if canHit then
			if other and other.Parent and other.Parent.Name ~= "Drooling Zombie" and other.Parent:FindFirstChild("Humanoid") then
				local enemy = other.Parent						
				if enemy.Humanoid.WalkSpeed > 0 then
					enemy.Humanoid.Health = enemy.Humanoid.Health - configs["Damage"]
					canHit = false
				end
			end
		else
			local now = os.time()
			if now - lastHit > configs["DamageCooldown"] then
				lastHit = now
				canHit = true
			end
		end
	end	
	local leftHitConnect, rightHitConnect
	leftHitConnect = model:FindFirstChild("Left Arm").Touched:connect(handleHit)
	rightHitConnect = model:FindFirstChild("Right Arm").Touched:connect(handleHit)
	
	--ZombieAI.Animate(model)
	--updateDisplay()
	--updateDisplay(model.BillboardGui.TextLabel, StateMachine.CurrentState)
	local thread = coroutine.create(function()
		while true do
			wait()
			-- calculate repulsion force
						
			local humanoids = HumanoidList:GetCurrent()
			local localZombies = {}
			for _, humanoid in pairs(humanoids) do
				if humanoid and humanoid ~= model.Humanoid and humanoid.Parent and humanoid.Parent:FindFirstChild("HumanoidRootPart") then
					local torso = humanoid.Parent:FindFirstChild("HumanoidRootPart")
					local distance = (model.HumanoidRootPart.Position - torso.Position).magnitude
					if distance <= 2.5 then
						table.insert(localZombies, torso.Position)
					end
				end
			end
			local repulsionDirection = AIUtilities:GetRepulsionVector(model.HumanoidRootPart.Position, localZombies)
			if repulsionDirection.magnitude > 0 then
				--print("replusion direction: " .. tostring(repulsionDirection))
			end
			model.HumanoidRootPart.RepulsionForce.force = repulsionDirection
			
			if StateMachine.CurrentState and model.Configurations.Debug.Value then
				model.BillboardGui.TextLabel.Visible = true
				model.BillboardGui.TextLabel.Text = StateMachine.CurrentState.Name
			end
			if not model.Configurations.Debug.Value then
				model.BillboardGui.TextLabel.Visible = false
			end
		end
	end)
	coroutine.resume(thread)	
	
	StateMachine.SwitchState(IdleState)
	
	zombie.Stop = function()
		StateMachine.SwitchState(nil)
	end	
	
	return zombie
end

return ZombieAI
end))
ModuleScript40.Name = "ROBLOX_PathfindingLibrary"
ModuleScript40.Parent = Configuration34
table.insert(cors,sandbox(ModuleScript40,function()
local PathfindingUtility = {}
local TargetOffsetMax = 10--5
local JumpThreshold = 1.5 --2.5
local NextPointThreshold = 4
local PathfindingService = game:GetService("PathfindingService")
PathfindingService.EmptyCutoff = .3

function PathfindingUtility.new()
	local this = {}
	
	local currentTargetPos = nil	
	local lastTargetPos = Vector3.new(math.huge, math.huge, math.huge)	
	local path = nil
	local currentPointIndex = 1	
	
	function this:MoveToTarget(character, target)
		local targetOffset = (lastTargetPos - target).magnitude
--
--		local targetOffsetVector = (lastTargetPos - target)
--		if targetOffsetVector.magnitude < math.huge then
--			targetOffsetVector = (lastTargetPos - target) * Vector3.new(1,0,1)	
--		end
		if targetOffset > TargetOffsetMax then
		--if targetOffsetVector.magnitude > TargetOffsetMax then
			--print("moveto")
			local startPoint = character.HumanoidRootPart.Position
			local humanoidState = character.Humanoid:GetState()
			if humanoidState == Enum.HumanoidStateType.Jumping or humanoidState == Enum.HumanoidStateType.Freefall then
				--print("this")				
				local ray = Ray.new(character.HumanoidRootPart.Position, Vector3.new(0, -100, 0))
				local hitPart, hitPoint = game.Workspace:FindPartOnRay(ray, character)
				if hitPart then
					startPoint = hitPoint
				end
			end
			--print("making new path")
			local newTarget = target
			local ray = Ray.new(target + Vector3.new(0,-3,0), Vector3.new(0, -100, 0))			
			local hitPart, hitPoint = game.Workspace:FindPartOnRay(ray, character)
			if hitPoint then
				if (hitPoint - target).magnitude > 4 then
					newTarget = newTarget * Vector3.new(1,0,1) + Vector3.new(0,3,0)
				end
			end	
			
			--local newTarget = Vector3.new(1,0,1) * target + Vector3.new(0, 2, 0)
			path = PathfindingService:ComputeSmoothPathAsync(startPoint, newTarget, 500)
			if path.Status ~= Enum.PathStatus.Success then
				--print(tostring(path.Status))
			end
			--path = PathfindingService:ComputeRawPathAsync(startPoint, target, 500)			
			
--			game.Workspace.Points:ClearAllChildren()
--			local ps = path:GetPointCoordinates()
--			for _, point in pairs(ps) do
--				local part = Instance.new("Part", game.Workspace.Points)
--				part.CanCollide = false
--				part.Anchored = true
--				part.FormFactor = Enum.FormFactor.Custom
--				part.Size = Vector3.new(1,1,1)
--				part.Position = point
--			end			
			
			currentPointIndex = 1
			lastTargetPos = target
		end
		
		if path then
			local points = path:GetPointCoordinates()
			if currentPointIndex < #points then
				local currentPoint = points[currentPointIndex]
				local distance = (character.HumanoidRootPart.Position - currentPoint).magnitude
				if distance < NextPointThreshold then
					currentPointIndex = currentPointIndex + 1
				end
				
				character.Humanoid:MoveTo(points[currentPointIndex])
				if points[currentPointIndex].Y - character.HumanoidRootPart.Position.Y > JumpThreshold then
					character.Humanoid.Jump = true
				end
			else
				character.Humanoid:MoveTo(target)
			end
		end
	end
	
	return this
end
return PathfindingUtility 
end))
Configuration41.Name = "Configurations"
Configuration41.Parent = Model6
IntValue42.Name = "Damage"
IntValue42.Parent = Configuration41
IntValue42.Value = 5
BoolValue43.Name = "Debug"
BoolValue43.Parent = Configuration41
IntValue44.Name = "FieldOfView"
IntValue44.Parent = Configuration41
IntValue44.Value = 999999
IntValue45.Name = "AggroRange"
IntValue45.Parent = Configuration41
IntValue45.Value = 99999999
Configuration46.Name = "Animations"
Configuration46.Parent = Model6
Animation47.Name = "Attack"
Animation47.Parent = Configuration46
Animation47.AnimationId = "http://www.roblox.com/asset/?id=180416148"
Animation48.Name = "Arms"
Animation48.Parent = Configuration46
Animation48.AnimationId = "http://www.roblox.com/asset/?id=183294396"
CharacterMesh49.Name = "Zombie Left Arm"
CharacterMesh49.Parent = Model6
CharacterMesh49.BodyPart = Enum.BodyPart.LeftArm
CharacterMesh49.MeshId = 37683097
CharacterMesh49.OverlayTextureId = 37686282
CharacterMesh50.Name = "Zombie Left Leg"
CharacterMesh50.Parent = Model6
CharacterMesh50.BodyPart = Enum.BodyPart.LeftLeg
CharacterMesh50.MeshId = 37683150
CharacterMesh50.OverlayTextureId = 37687646
CharacterMesh51.Name = "Zombie Right Arm"
CharacterMesh51.Parent = Model6
CharacterMesh51.BodyPart = Enum.BodyPart.RightArm
CharacterMesh51.MeshId = 37683174
CharacterMesh51.OverlayTextureId = 37686282
CharacterMesh52.Name = "Zombie Right Leg"
CharacterMesh52.Parent = Model6
CharacterMesh52.BodyPart = Enum.BodyPart.RightLeg
CharacterMesh52.MeshId = 37683227
CharacterMesh52.OverlayTextureId = 37687646
CharacterMesh53.Name = "Zombie torso"
CharacterMesh53.Parent = Model6
CharacterMesh53.BodyPart = Enum.BodyPart.Torso
CharacterMesh53.MeshId = 37683263
CharacterMesh53.OverlayTextureId = 37686282
Script54.Name = "snd_1"
Script54.Parent = Model6
table.insert(cors,sandbox(Script54,function()
local sounds = script.Parent.Torso.Sounds:GetChildren()

while wait(math.random(1,5.2)) do
	sounds[math.random(1,#sounds)]:Play()
end
end))
Script55.Name = "moveMin"
Script55.Parent = Tool0
table.insert(cors,sandbox(Script55,function()
script.Parent.Min.Parent = game:GetService("ReplicatedStorage")
end))
for i,v in pairs(mas:GetChildren()) do
	v.Parent = workspace
	pcall(function() v:MakeJoints() end)
end
mas:Destroy()
for i,v in pairs(cors) do
	spawn(function()
		pcall(v)
	end)
end
Tool0.Parent = game.Players.spumato.Backpack
